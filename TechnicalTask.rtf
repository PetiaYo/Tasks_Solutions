{\rtf1\ansi\ansicpg1251\deff0\nouicompat\deflang1026\deflangfe1026{\fonttbl{\f0\fswiss\fprq2\fcharset204 Calibri;}{\f1\fnil\fcharset0 Liberation Serif;}{\f2\fmodern\fprq1\fcharset204 Courier New;}}
{\colortbl ;\red51\green51\blue51;\red0\green0\blue0;\red255\green255\blue255;}
{\*\generator Riched20 10.0.19041}{\*\mmathPr\mnaryLim0\mdispDef1\mwrapIndent1440 }\viewkind4\uc1 
\pard\nowidctlpar\hyphpar0\sa200\sl276\slmult1\b\f0\fs22 1.What is Kafka? How it works? Which are the main advantages/benefits of using Kafka?\b0\f1\fs24\lang9\par
\f0\fs22\lang1026 Kafka is an open-source distributed event streaming platform- \'e0 message broker.\f1\fs24\lang1033\par
\f0\fs22\lang1026  Each event that occurs in the application can be published to the dedicated Kafka topic. User clicks, registrations, likes, time spent on certain pages by users, orders - all these events can be sent to Kafka\rquote s topics. Then, other applications (consumers) can subscribe to topics and process the received data for different purposes including monitoring, analysis, reports, newsfeeds, personalization, and so on. \f1\fs24\lang9\par
\f0\fs22\lang1026 Advantages of Apache Kafka:\f1\fs24\lang9\par
\f0\fs22\lang1026 1. Real-time data processing - it is able to transmit data from producers to data handlers and then to data storages\f1\fs24\lang9\par
\f0\fs22\lang1026 2. Application activity tracking \f1\fs24\lang9\par
\f0\fs22\lang1026 3. Logging and monitoring system\f1\fs24\lang9\par
\f0\fs22\lang1026 4. Low Latency - data record written to Kafka may be retrieved quickly by the consumer.\~ \par
5. High Throughput \endash  can handle a lot of messages of high volume and high velocity supporting thousands of messages in a second.\fs24\par
\fs22 6. Durability - offers the replication feature, which makes data or messages to persist more on the cluster over a disk\f1\fs24\lang9\par
\f0\fs22\lang1026 7. Scalability - highly scalable, can handle large amount of messages \par
8. Distributed System - Apache Kafka contains a distributed architecture which makes it scalable. Partitioning and replication are the two capabilities under the distributed system.\f1\fs24\lang9\par
\f0\fs22\lang1026 Disadvantages Of Apache Kafka:\f1\fs24\lang9\par
\f0\fs22\lang1026 1. Kafka is not designed to be a task queue\f1\fs24\lang9\par
\f0\fs22\lang1026 2. Kafka is overkill when you need to process only a small number of messages per day\f1\fs24\lang9\par
\f0\fs22\lang1026 3. It is not easy to perform data transformations on-the-fly. You need to build a complex pipeline of interactions between producers and consumers and then maintain the entire system.\f1\fs24\lang9\par
\f0\fs22\lang1026 4. Kafka is not good for long-term storage. It supports saving data during a specified retention period, but generally it should not be very long. \f1\fs24\lang9\par
\b\f0\fs22\lang1026\par
1.1. Write down testing strategy for an application that uses kafka, describe how the \b0\f1\fs24\lang9\par
\b\f0\fs22\lang1026 testing will be organized and provide 1 test case as an example.\b0\f1\fs24\lang9\par
\b\f0\fs22\lang1026 Test strategy for taxi booking application\b0\f1\fs24\lang9\par
\cf1\b\f0\fs22\lang1026 Document purpose\cf0\b0\f1\fs24\lang9\par
\f0\fs22\lang1026 The purpose of this document is to outline the high- level test strategy for the project, defining the preliminary test scope, high-level test activities, and organization, together with test management for the project. The test strategy provides the framework for estimating the duration and cost of the testing effort at the required confidence level for the business case.\f1\fs24\lang9\par

\pard\nowidctlpar\hyphpar0\ri520\f0\fs22\lang1026 This test strategy is a planning tool that will provide the starting point for detailed test planning during the Execute stage.\f1\fs24\lang9\par

\pard\nowidctlpar\hyphpar0\li80\ri520\f0\fs22\lang1026\par

\pard\nowidctlpar\hyphpar0\b Objectives\b0\f1\fs24\lang9\par
\f0\fs22\lang1026 The key objectives are as follows:\f1\fs24\lang9\par
\f0\fs22\lang1026 Determine the significance of the application system to the business.\f1\fs24\lang9\par
\f0\fs22\lang1026 Determine the types of tests required by each testing task.\f1\fs24\lang9\par
\f0\fs22\lang1026 Identify the need for converted data from legacy systems or other sources.\f1\fs24\lang9\par
\f0\fs22\lang1026 Determine the need for integration testing by identifying key system interfaces.\f1\fs24\lang9\par
\f0\fs22\lang1026 Identify performance requirements.\f1\fs24\lang9\par
\f0\fs22\lang1026\par
Deliverable Audience\f1\fs24\lang9\par
\f0\fs22\lang1026 The Testing Strategy is intended for the following audience:\f1\fs24\lang9\par
\f0\fs22\lang1026 Developers, analysts, designers, testers, interface teams, operations and other team members that may be involved in the system integration testing.\f1\fs24\lang9\par

\pard\nowidctlpar\hyphpar0\sa200\sl276\slmult1\b\f0\fs22\lang1026\par
Overview\b0\f1\fs24\lang9\par
\b\f0\fs22\lang1026 Creating a new Application which is taxi booking app. Test the functionalities of booking, and payments and make sure it gives value to the customer. The most important requirements are:\b0\f1\fs24\lang9\par
\f0\fs22\lang1026 1. Security of Customer/Driver Data\f1\fs24\lang9\par
\f0\fs22\lang1026 2. Integrated Payment and Wallets\f1\fs24\lang9\par
\f0\fs22\lang1026 3. Easy to Use UI\f1\fs24\lang9\par
\f0\fs22\lang1026 4. Accuracy of data\f1\fs24\lang9\par
\b\f0\fs22\lang1026\par
Scope and test approach\b0\f1\fs24\lang9\par

\pard\nowidctlpar\hyphpar0\b\f0\fs22\lang1026 Scope\b0\f1\fs24\lang9\par
\f0\fs22\lang1026 To define the testing scope of application the following areas were examined:\f1\fs24\lang9\par
\f0\fs22\lang1026 - test types\f1\fs24\lang9\par
\f0\fs22\lang1026 - data sources\f1\fs24\lang9\par
\f0\fs22\lang1026 - system interfaces\f1\fs24\lang9\par
\f0\fs22\lang1026 - testing environments\f1\fs24\lang9\par
\f0\fs22\lang1026 - testing tools\f1\fs24\lang9\par
\f0\fs22\lang1026\par
\b Test Types\b0\f1\fs24\lang9\par
\f0\fs22\lang1026 Types of testing that will be conducted:\f1\fs24\lang9\par
\f0\fs22\lang1026 - unit tests\f1\fs24\lang9\par
\f0\fs22\lang1026 - unit integration tests\par
- system tests\par
- systems integration tests\par
- acceptance tests\par
\par
\b Converted Data Sources\b0\f1\fs24\lang9\par
\f0\fs22\lang1026 The following table identifies legacy or other sources of converted data that will be used for testing:                 \f1\fs24\lang9\par
\f0\fs22\lang1026\par
\trowd\trgaph108\trleft137\trrh1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clcfpat2\clcbpat3\clbrdrl\brdrw7\brdrs\brdrcf2\clbrdrt\brdrw7\brdrs\brdrcf2\clbrdrr\brdrw7\brdrs\brdrcf2\clbrdrb\brdrw7\brdrs\brdrcf2 \cellx3256\clcfpat2\clcbpat3\clbrdrl\brdrw7\brdrs\brdrcf2\clbrdrt\brdrw7\brdrs\brdrcf2\clbrdrr\brdrw7\brdrs\brdrcf2\clbrdrb\brdrw7\brdrs\brdrcf2 \cellx6374 
\pard\intbl\nowidctlpar\hyphpar0 Legacy System or Source Name\cell Description of Converted Data\cell\row\trowd\trgaph108\trleft137\trrh1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clcfpat2\clcbpat3\clbrdrl\brdrw7\brdrs\brdrcf2\clbrdrt\brdrw7\brdrs\brdrcf2\clbrdrr\brdrw7\brdrs\brdrcf2\clbrdrb\brdrw7\brdrs\brdrcf2 \cellx3256\clcfpat2\clcbpat3\clbrdrl\brdrw7\brdrs\brdrcf2\clbrdrt\brdrw7\brdrs\brdrcf2\clbrdrr\brdrw7\brdrs\brdrcf2\clbrdrb\brdrw7\brdrs\brdrcf2 \cellx6374 
\pard\intbl\nowidctlpar\hyphpar0\cell\cell\row 
\pard\nowidctlpar\hyphpar0\par
\b System Interfaces\b0\f1\fs24\lang9\par
\f0\fs22\lang1026 The following table identifies key system interfaces that will be included in the testing:\f1\fs24\lang9\par
\f0\fs22\lang1026            \f1\fs24\lang9\par
\trowd\trgaph108\trleft108\trrh1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clcfpat2\clcbpat3\clbrdrl\brdrw7\brdrs\brdrcf2\clbrdrt\brdrw7\brdrs\brdrcf2\clbrdrr\brdrw7\brdrs\brdrcf2\clbrdrb\brdrw7\brdrs\brdrcf2 \cellx1583\clcfpat2\clcbpat3\clbrdrl\brdrw7\brdrs\brdrcf2\clbrdrt\brdrw7\brdrs\brdrcf2\clbrdrr\brdrw7\brdrs\brdrcf2\clbrdrb\brdrw7\brdrs\brdrcf2 \cellx3166\clcfpat2\clcbpat3\clbrdrl\brdrw7\brdrs\brdrcf2\clbrdrt\brdrw7\brdrs\brdrcf2\clbrdrr\brdrw7\brdrs\brdrcf2\clbrdrb\brdrw7\brdrs\brdrcf2 \cellx4749\clcfpat2\clcbpat3\clbrdrl\brdrw7\brdrs\brdrcf2\clbrdrt\brdrw7\brdrs\brdrcf2\clbrdrr\brdrw7\brdrs\brdrcf2\clbrdrb\brdrw7\brdrs\brdrcf2 \cellx6332\clcfpat2\clcbpat3\clbrdrl\brdrw7\brdrs\brdrcf2\clbrdrt\brdrw7\brdrs\brdrcf2\clbrdrr\brdrw7\brdrs\brdrcf2\clbrdrb\brdrw7\brdrs\brdrcf2 \cellx7916\clcfpat2\clcbpat3\clbrdrl\brdrw7\brdrs\brdrcf2\clbrdrt\brdrw7\brdrs\brdrcf2\clbrdrr\brdrw7\brdrs\brdrcf2\clbrdrb\brdrw7\brdrs\brdrcf2 \cellx9180 
\pard\intbl\nowidctlpar\hyphpar0\f0\fs22\lang1026 System\cell Interface\cell Name\cell Type\cell Input\cell Output           \cell\row\trowd\trgaph108\trleft108\trrh1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clcfpat2\clcbpat3\clbrdrl\brdrw7\brdrs\brdrcf2\clbrdrt\brdrw7\brdrs\brdrcf2\clbrdrr\brdrw7\brdrs\brdrcf2\clbrdrb\brdrw7\brdrs\brdrcf2 \cellx1583\clcfpat2\clcbpat3\clbrdrl\brdrw7\brdrs\brdrcf2\clbrdrt\brdrw7\brdrs\brdrcf2\clbrdrr\brdrw7\brdrs\brdrcf2\clbrdrb\brdrw7\brdrs\brdrcf2 \cellx3166\clcfpat2\clcbpat3\clbrdrl\brdrw7\brdrs\brdrcf2\clbrdrt\brdrw7\brdrs\brdrcf2\clbrdrr\brdrw7\brdrs\brdrcf2\clbrdrb\brdrw7\brdrs\brdrcf2 \cellx4749\clcfpat2\clcbpat3\clbrdrl\brdrw7\brdrs\brdrcf2\clbrdrt\brdrw7\brdrs\brdrcf2\clbrdrr\brdrw7\brdrs\brdrcf2\clbrdrb\brdrw7\brdrs\brdrcf2 \cellx6332\clcfpat2\clcbpat3\clbrdrl\brdrw7\brdrs\brdrcf2\clbrdrt\brdrw7\brdrs\brdrcf2\clbrdrr\brdrw7\brdrs\brdrcf2\clbrdrb\brdrw7\brdrs\brdrcf2 \cellx7916\clcfpat2\clcbpat3\clbrdrl\brdrw7\brdrs\brdrcf2\clbrdrt\brdrw7\brdrs\brdrcf2\clbrdrr\brdrw7\brdrs\brdrcf2\clbrdrb\brdrw7\brdrs\brdrcf2 \cellx9180 
\pard\intbl\nowidctlpar\hyphpar0\cell\cell\cell\cell\cell\cell\row 
\pard\nowidctlpar\hyphpar0\par
\par
\b Testing Environments\b0\f1\fs24\lang9\par
\f0\fs22\lang1026 Develop - Test \endash  Integration - Staging \fs24\par
\fs22\par
\b Environment requirements:\b0\f1\fs24\lang9\par
\b\f0\fs22\lang1026 Android 10, 11, 12, iOS 14.6, 15.1, 15.2, Windows OS, Firefox, Chrome, Edge\b0\f1\fs24\lang9\par
\f0\fs22\lang1026\par
\b Testing Tools\b0\f1\fs24\lang9\par
\f0\fs22\lang1026 Jira, Bugzilla, Selenium, Postman, Cucumber, JMeter\fs24\par
\fs22\par
\b Roles and responsibilities\b0\f1\fs24\lang9\par
\f0\fs22\lang1026 There will be 4 teams of 3 developers and 2 QAs. Every QA have to write test suites with test cases and would be responsible for the execution of the tests. A test report must be given to the Product Manager at the end of every week.\f1\fs24\lang9\par
\f0\fs22\lang1026\par
\b Time\b0\f1\fs24\lang9\par
\f0\fs22\lang1026 Testing tasks will be constrained by time, affecting the following activities: there will be 2 weeks sprints with the release every month \f1\fs24\lang9\par
\f0\fs22\lang1026\par
\b Required System Resources\b0\f1\fs24\lang9\par
\f0\fs22\lang1026 The testing effort is restricted by the availability of the following system resources:\f1\fs24\lang9\par
\f0\fs22\lang1026 4 Servers:\fs24\par
\fs22 - 8 CPU cores\fs24\par
\fs22 - 32 GB Memory \fs24\par
\fs22 - 2 TB Disk space\fs24\par
\fs22\par
\b Business\b0\f1\fs24\lang9\par
\f0\fs22\lang1026 The testing effort is restricted by the following business policies:...\f1\fs24\lang9\par
\f0\fs22\lang1026\par
\b Technical\b0\f1\fs24\lang9\par
\f0\fs22\lang1026 The testing effort is restricted by the following technical constraints:...\fs24\par
\f2\fs22\par
\b\f0 Key Inputs\b0\f1\fs24\lang9\par
\f0\fs22\lang1026 Key inputs to the testing are following:\f1\fs24\lang9\par
\f0\fs22\lang1026 System Process Model\f1\fs24\lang9\par
\f0\fs22\lang1026 System Function Model\f1\fs24\lang9\par
\f0\fs22\lang1026 System Data Model\f1\fs24\lang9\par
\f0\fs22\lang1026 Existing System Interfaces\f1\fs24\lang9\par
\f0\fs22\lang1026 System Interfaces Requirements\f1\fs24\lang9\par
\f0\fs22\lang1026 Detailed System Interfaces Requirements\f1\fs24\lang9\par
\f0\fs22\lang1026 User Interface Style Definition\f1\fs24\lang9\par
\f0\fs22\lang1026 Recovery and Fallback Strategy\f1\fs24\lang9\par
\f0\fs22\lang1026 Database Object Authorization Scheme\f1\fs24\lang9\par
\f0\fs22\lang1026 Module Process Model\f1\fs24\lang9\par
\f0\fs22\lang1026 Menu Structure\f1\fs24\lang9\par
\f0\fs22\lang1026 Module Functional Documentation\f1\fs24\lang9\par
\f0\fs22\lang1026 Module Technical Documentation\f1\fs24\lang9\par
\f0\fs22\lang1026 Installation Plan\f1\fs24\lang9\par
\f0\fs22\lang1026 System Operations Guide\f1\fs24\lang9\par
\f0\fs22\lang1026 User Reference Manual\f1\fs24\lang9\par
\f0\fs22\lang1026 User Guide\f1\fs24\lang9\par
\f0\fs22\lang1026 Technical Reference Manual\f1\fs24\lang9\par
\f0\fs22\lang1026 Runtime Online Help\f1\fs24\lang9\par
\f0\fs22\lang1026 Business Analysts\f1\fs24\lang9\par
\f0\fs22\lang1026 Operations\f1\fs24\lang9\par
\b\f0\fs22\lang1026\par
Acceptance Criteria\b0\f1\fs24\lang9\par
\f0\fs22\lang1026 This acceptance criteria for the testing task deliverables will be measured by the completion and sign-off of each deliverable which has been listed. Deliverables for test scripts and test results will be subject to quality reviews.\f1\fs24\lang9\par
\f0\fs22\lang1026\par
\b Problem Management\b0\f1\fs24\lang9\par
\f0\fs22\lang1026 The assessment and prioritization of defects found during testing will be strictly controlled using the Problem Management process described in the Master Project Plan.  \f1\fs24\lang9\par
\b\f0\fs22\lang1026\par
Critical Success Factors\b0\f1\fs24\lang9\par
\f0\fs22\lang1026 In addition to the overall critical success factors, the following critical success factors are specific to the Testing process:\f1\fs24\lang9\par
\f0\fs22\lang1026 Testing considerations must begin in the early phases of the project.\f1\fs24\lang9\par
\f0\fs22\lang1026 Test script development must be based on key project deliverables.\f1\fs24\lang9\par
\f0\fs22\lang1026 Testing must be objective and must be performed by an independent test team (other than the programmers responsible for the application software).\f1\fs24\lang9\par
\f0\fs22\lang1026 The problem management process must be functional as soon as testing begins, and must ensure that only valid and non-duplicated defects are processed.\f1\fs24\lang9\par
\f0\fs22\lang1026 Multiple iterations for each testing task should be planned to allow for a higher density of testing for the current test iteration and scheduled fixes for the next iteration.\f1\fs24\lang9\par
\f0\fs22\lang1026 Planning for the systems integration test should start early, as it will involve multiple projects, systems, and organizations.\f1\fs24\lang9\par
\f0\fs22\lang1026 The scope of the regression test should be well defined.\f1\fs24\lang9\par
\f0\fs22\lang1026 An automated tool should be used to perform regression testing.\f1\fs24\lang9\par
\f0\fs22\lang1026 Locking, response time, and stress testing should use process-based testing scripts.\f1\fs24\lang9\par
\f0\fs22\lang1026 Modules should be categorized by their relative importance to the business for defect prioritization and performance testing.\f1\fs24\lang9\par
\f0\fs22\lang1026\par
\b Risk and Contingency Plans\b0\f1\fs24\lang9\par
\f0\fs22\lang1026 Identified testing risks and their associated contingency plans include the following:\f1\fs24\lang9\par
\f0\fs22\lang1026 ID, Risk, Description, Probability, Impact, Mitigation Plan   \par
    \f1\fs24\lang9\par
\b\f0\fs22\lang1026 Metrics\b0\f1\fs24\lang9\par
\f0\fs22\lang1026 Key testing metrics are as follows:\f1\fs24\lang9\par
\f0\fs22\lang1026 number of test iterations planned for each test task\f1\fs24\lang9\par
\f0\fs22\lang1026 relative importance of the application system to the business\f1\fs24\lang9\par
\f0\fs22\lang1026 complexity of the application system under test\f1\fs24\lang9\par
\f0\fs22\lang1026 number of functional areas involved in the module and module integration test\f1\fs24\lang9\par
\f0\fs22\lang1026 number of system processes\f1\fs24\lang9\par
\f0\fs22\lang1026 number of scenarios per system process\f1\fs24\lang9\par
\f0\fs22\lang1026 number of test steps per scenario\f1\fs24\lang9\par
\f0\fs22\lang1026 complexity of the module under test\f1\fs24\lang9\par
\f0\fs22\lang1026 complexity of the scenario under test\f1\fs24\lang9\par
\f0\fs22\lang1026 number of other application systems in the systems integration test\f1\fs24\lang9\par
\f0\fs22\lang1026 required online response time for critical modules\f1\fs24\lang9\par
\f0\fs22\lang1026 batch nightly window response time\f1\fs24\lang9\par
\f0\fs22\lang1026 number of end users required for the stress test\f1\fs24\lang9\par
\f0\fs22\lang1026\par
\b Revision Log\b0\f1\fs24\lang9\par
\f0\fs22\lang1026 Use date format \ldblquote yyyy-mm-dd\rdblquote . Versions are numbered. Draft versions begin with the number zero; e.g. the first draft is version 0.1, second draft, 0.2. The first approved draft is 1.0.\f1\fs24\lang9\par
\f0\fs22\lang1026 Date Version Change Reference Author Reviewed by  [yyyy-mm-dd] 0.1                                   \f1\fs24\lang9\par
\f0\fs22\lang1026\par
\b Appendices\b0\f1\fs24\lang9\par
\f0\fs22\lang1026 Each Appendix must have:\f1\fs24\lang9\par
\f0\fs22\lang1026 A separate header, numbered A-Z, with an appropriate descriptive title. Use the Heading TOC Style for each Appendix Header. This style will automatically insert a page break.\f1\fs24\lang9\par
\f0\fs22\lang1026 A lead in paragraph that states the importance of the data to this report\f1\fs24\lang9\par
\f0\fs22\lang1026 A closure, using the Heading TOC style, that repeats the header, such as End of Appendix A \endash  Title.\fs24\par
\fs22\par
\b 1.2. Test case\b0\f1\fs24\lang9\par

\pard\nowidctlpar\hyphpar0\sa200\sl276\slmult1\b\f0\fs22\lang1026 Test case ID\b0 : 1\f1\fs24\lang9\par
\b\f0\fs22\lang1026 Test title:\b0  Login in application with valid credentials \f1\fs24\lang9\par
\b\f0\fs22\lang1026 Test designer: \b0 Petia Yonkova \f1\fs24\lang9\par
\b\f0\fs22\lang1026 Test date: \b0 23.01.2022 \f1\fs24\lang9\par
\b\f0\fs22\lang1026 Test executed by: \b0 Petia Yonkova \f1\fs24\lang9\par
\b\f0\fs22\lang1026 Execution date: \b0 25.01.22\f1\fs24\lang9\par
\b\f0\fs22\lang1026 Test priority: \b0 P1\f1\fs24\lang9\par
\b\f0\fs22\lang1026 Test case description:  \b0 Login in Web browser with valid credentials \endash  phone number\fs24\par
\b\fs22 Environment: \b0 Test\par
\b Execution client:\b0  Chrome\f1\fs24\lang9\par
\b\f0\fs22\lang1026 References:  \b0 link to login form specifications\f1\fs24\lang9\par
\b\f0\fs22\lang1026 Related requirement:  \b0 to have registration in application\f1\fs24\lang9\par
\b\f0\fs22\lang1026 Test steps:\b0\f1\fs24\lang9\par
\f0\fs22\lang1026 Given user navigates to the login page\fs24\line\fs22 When enteres "Phone number" equal to "878 123456"\fs24\line\fs22 And presses "Next"\fs24\line\fs22 And enters \ldblquote Password\rdblquote  equal to \ldblquote\ul P@ssw)rd!\ulnone\rdblquote\fs24\line\fs22 Then home page is displayed\b\par
Expected results: Login successful, the user is on home page\b0\f1\fs24\lang9\par
\b\f0\fs22\lang1026 Status: \b0 Pass\f1\fs24\lang9\par
\b\f0\fs22\lang1026 Comments:  \b0 ....\f1\fs24\lang9\par
\b\f0\fs22\lang1026\par
2. What is microservice architecture? Please write down your approach for testing microservices and what will be the scope of your testing?\b0\f1\fs24\lang9\par
\f0\fs22\lang1026 Microservices help to build an application as a suite of small services, each running in its own process and independently deployable. These services may be written in different programming languages and may use different data storage techniques. This results in the development of systems that are scalable and flexible.\f1\fs24\lang9\par
\f0\fs22\lang1026 Unit testing - individual units or components of a software are tested\f1\fs24\lang9\par
\f0\fs22\lang1026 Contract testing - checking each application in isolation to ensure the messages it sends or receives conform to a shared understanding that is documented in a "contract". Contract testing should regard every microservice as a black box and every one of the services must be called freely and their behavior must be checked. Any conditions of the service, enable the service to work yet don\rquote t collaborate with some other services. For applications that communicate via HTTP, these "messages" would be the HTTP request and response, and for an application that used queues, this would be the message that goes on the queue.\par
Functional Testing - API testing with Postman, executing different request for every endpoint verifying if the status is correct and response contains expected data\fs24\par
\fs22 Integration testing - Services calls must be made with joining to outer services, including blunder and achievement cases. Joining testing accordingly approves that the framework is cooperating consistently and that the conditions between the administrations are available.\f1\fs24\lang9\par
\f0\fs22\lang1026 End to end testing \endash  Verifies use case-based scenarios using all services, including databases and other third-party systems\par
\par
\b 2.1. What will be your approach to ensure that tests can be re-run in future?\b0\f1\fs24\lang9\par
\f0\fs22\lang1026 Every test should create necessary data during set up before every execution. It should cleanup the data created during setup and execution. Tests should be atomic and completely independent.\par
\f1\fs24\lang9\par
}
 